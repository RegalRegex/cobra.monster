---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

export interface GalleryGridItem {
  image: ImageMetadata;
  caption?: string;
  altText?: string;
  credit?: {
    name?: string;
    link?: string;
  }
}
interface Props {
  galleryGridItems: GalleryGridItem[];
}
const { galleryGridItems } = Astro.props;
---

<div class="text-center my-16 mb-32">

  <div class="mx-auto container my-8 sm:columns-2 md:columns-3 lg:columns-4 xl:columns-5">
    {
      galleryGridItems.map((gridItem, index) => (
        <Image
          src={gridItem.image}
          alt={gridItem.altText || 'Grid Item Image'}
          format="avif"
          quality={50}
          class="mb-4 border border-transparent hover:border-gray-300 transition-all duration-300 ease-in-out hover:shadow-lg lightboxImg hover:cursor-pointer"
          loading="lazy"
          id={`${gridItem.image.src.split("/").at(-1)}`}
        />
        <dialog class="fixed w-full h-full left-0 top-0 bg-black/90 backdrop-blur-sm hidden z-50 items-center justify-center flex-col" id={`dialog_${gridItem.image.src.split("/").at(-1)}`}>
            {/* <div class="absolute top-[50%] left-[50%] translate-[-50%, -50%] text-slate-50">Loading...</div> */}
            <Image src={gridItem.image} alt="Test" class="block mx-auto mt-4 max-w-[95vw] max-h-[95vh] object-contain rounded-sm shadow-lg relative z-20 transition-opacity duration-300 opacity-100" loading="lazy"/>
            {/* TODO: Caption and/or Link logic here */}
            <div class="block right-2 text-slate-50 opacity-80 text-xs rounded-full z-50 mt-2 flex flex-col">
              <p>{gridItem.caption}</p>
              {gridItem.credit && gridItem.credit.link ? <a href={gridItem.credit.link}>{gridItem.credit.name}</a>: <p>{gridItem.credit?.name}</p>

              
              }
              </div>
    </dialog>
        // <Modal id={index} />
      ))
    }
  </div>
</div>
<script>
    const lightboxImgs = document.querySelectorAll('.lightboxImg');

    // handle clicks
    lightboxImgs.forEach((img) => {
        img.addEventListener('click', () => {
            const imgId = img.id;
            const imgDialog = document.getElementById(`dialog_${imgId}`);
            imgDialog?.addEventListener('click', () => {
                imgDialog.classList.replace('flex', 'hidden')
                document.body.style.overflow=""
            })
            if (imgDialog?.classList.contains('hidden')) {
                imgDialog.classList.replace('hidden', 'flex');
                document.body.style.overflow="hidden"
            } else {
                imgDialog?.classList.replace('flex', 'hidden');
                document.body.style.overflow=""
            }
        })
    })

</script>