---
import type { MarkdownHeading } from "astro";
import TextDeco from "@components/TextDeco.astro";
import ChiStar from "@components/ImageComponents/ChiStar.astro";

interface Props {
  headings: MarkdownHeading[];
}
const { headings } = Astro.props;
const filteredHeadings = headings.filter((heading) => heading.text !== "Footnotes");

---

<nav class="sticky top-0 pt-4">
  <h3 class="text-3xl font-medium mb-2">Contents</h3>
  <ul>
    {
      filteredHeadings.map((heading, i, arr) => {
        if (heading.depth > 1) {
          return (
            <li>
              <TextDeco url={`#${heading.slug}`}>
                <span class="text-sm">
                  {[...Array(heading.depth - 1)].map(() => (
                    <ChiStar />
                  ))}
                </span>
                <span class="text-wrap">{heading.text}</span>
              </TextDeco>
            </li>
          );
        }
        return (
          // Divider element. Separates top level headers. "arr" avoids line when multiple top-level headers in sequence
            <div class:list={[" w-[75%]  bg-slate-200/30 p-0.5 mb-1.5", `${(i===0 || arr[i-1].depth === 1) ? 'hidden' :'inline-block'}`]}></div>
            <li>
              <TextDeco url={`#${heading.slug}`}>{heading.text}</TextDeco>
            </li>
        );
      })
    }
  </ul>
</nav>
