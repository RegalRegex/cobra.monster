---
import Layout from "@layouts/Layout.astro";
import { Image } from "astro:assets";

import ChiStar from "@components/ImageComponents/ChiStar.astro";
import InlineEmoji from "@components/ImageComponents/InlineEmoji.astro";
import BlogAboutMe from "@components/BlogAboutMe.astro"

import hotDrink from "@assets/mutantEmoji/hot_drink.png";
import sunsetCity from "@assets/mutantEmoji/sunset_city.png";
import greenMoney from "@assets/mutantEmoji/utility/green_money.png";
import sunriseOverMountains from "@assets/mutantEmoji/sunrise_over_mountains.png";
import laptop from "@assets/mutantEmoji/laptop.png";
import finishFlag from "@assets/mutantEmoji/finish_flag.png";
import questionMark from "@assets/mutantEmoji/utility/gray_question_mark.png";
import heart from "@assets/mutantEmoji/utility/purple_heart.png"
import type { CollectionEntry } from "astro:content";
import TopNav from "./TopNav.astro";
import BlogStyleMain from "./Snippets/BlogStyleMain.astro";

interface Props {
  cafeCollectionItem: CollectionEntry<"coffeeShopReviews">;
}

interface ratingSystem {
  [key: string]: { emoji: ImageMetadata; legend: string };
}

const ratingArray: ratingSystem = {
  coffee: { emoji: hotDrink, legend: "No-holds-barred coffee quality rating" },
  cafe: { emoji: sunsetCity, legend: "Quality of cafe re: design, theming, layout" },
  price: { emoji: greenMoney, legend: "5 = very cheap/affordable" },
  productivity: { emoji: laptop, legend: "Table size, outlet availability, wifi" },
  vibes: { emoji: sunriseOverMountains, legend: "Subjective 'How does it feel being here?'" },
};

const { cafeCollectionItem }: Props = Astro.props;
const cafeData = cafeCollectionItem.data;
const ratings = cafeData.rating;
const totalScore = Object.values(ratings).reduce((a, b) => a + b);
const { Content } = await cafeCollectionItem.render();
---

<!-- TODO: OG image -->
<Layout blog={true}>
  <TopNav />
      <BlogStyleMain>
      <Fragment slot="header"}>
          <h1 class="font-black text-yellow decoration-4 decoration-white md:text-6xl text-4xl mb-5">{cafeData.cafeName}</h1>
        <span class="flex justify-around my-2 col-span-1 xs:text-lg md:text-2xl text-slate-200"><ChiStar /><ChiStar />{cafeData.location}<ChiStar /><ChiStar /></span>

      </Fragment>
      <Fragment slot="aside">
      <ul class="self-center min-w-[75%] text-sm sm:text-lg">
        {
          Object.entries(ratings).map(([key, value], i) => {
            const ratingItem = ratingArray[key as keyof typeof ratingArray];
            return (
              <li class="flex flex-col">
                <div class="flex justify-between">
                  <a href={`#${key}`} class="capitalize flex-none">
                    <InlineEmoji emoji={ratingItem.emoji} styles={"w-5 sm:w-7"} />
                    {key}
                  </a>
                  <span class="d grow border-b-2 border-yellow float-left relative block border-dotted h-3.5 mx-1" />
                  <span class:list={[`text-right flex-none`]}>{value} / {i === 0 ? 10 : 5}</span>
                </div>
                <span class="overflow-y-hidden transition-all duration-500 ease-in-out max-h-0 opacity-0 rating-key text-xs sm:text-base">{ratingItem.legend}</span>
              </li>
            );
          })
        }
        <span class="flex my-2 border-b  w-full"></span>
        <li class="flex flex-col">
          <div class="flex justify-between">
            <span class="capitalize flex-none">
              <InlineEmoji emoji={finishFlag} styles={"w-5 sm:w-7"} />
              Total
            </span>
            <span class="d grow border-b-2 border-yellow float-left relative block border-dotted h-3.5 mx-1"></span>
            <span class="text-right flex-none font-bold">{totalScore} / 30</span>
          </div>
        </li>
        <span class="flex justify-between text-[10px] sm:text-sm">
          <span>Updated: {cafeData.latestUpdate.toLocaleDateString("en-US", { day: "numeric", month: "numeric", year: "2-digit", timeZone: "UTC" })}</span>
          <button
            class="toggle-legend hover:cursor-pointer hover:text-white hover:bg-gray-300 aspect-square p-0.5 rounded-full border-gray-400 border inline-flex shrink"
            ><InlineEmoji emoji={questionMark} styles="w-2.5 sm:w-4" /></button
          >
        </span>
      </ul>
      <BlogAboutMe />
    </Fragment>
      <Fragment slot="main"}>
          {cafeData.headerImg && <Image src={cafeData.headerImg} alt={"chill"} />}
          {cafeData.summary && <h2>Summary</h2>
          <p>{cafeData.summary}</p>
          }
          <Content />cafeData
      </Fragment>
    </BlogStyleMain>
</Layout>

<script>
  function setToggleHideOnClick() {
    const legendText = document.querySelectorAll(".rating-key");
    const legendButton = document.querySelector(".toggle-legend");
    legendButton?.addEventListener("click", () => {
      legendText.forEach((legend) => {
        if (legend.classList.contains("max-h-0")) {
          // legend.classList.remove("hidden");
          legend.classList.remove("max-h-0", "opacity-0");
          legend.classList.add("max-h-20", "opacity-100", "mb-2");
        } else {
          // legend.classList.add("hidden");
          legend.classList.add("max-h-0", "opacity-0");
          legend.classList.remove("max-h-20", "opacity-100", "mb-2");
        }
      });
    });
  }
  setToggleHideOnClick();
  document.addEventListener("astro:after-swap", setToggleHideOnClick);
</script>
<!-- For conditionally rendering an asterisk -->
<style> */
.rating-score::after {
  content: '*';
  position: absolute;
  margin-left: calc(var(--spacing)*0.5);
  font-size: var(--text-xs);
}
</style>