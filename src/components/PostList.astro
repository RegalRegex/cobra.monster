---
import { type CollectionEntry, getCollection } from "astro:content";
import PostSummary from "./PostSummary.astro";
import { getEntries } from "astro:content";

interface Props {
  tagId?: string
  // taggedPosts?: Array<CollectionEntry<"posts">>;
  postLimit?: number;
}

const blogEntries = await getCollection("posts");

const { tagId, postLimit } = Astro.props;

const blogSort = (posts: Array<CollectionEntry<"posts">>) => posts.sort((a, b) => {
    return new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf();
  });

const posts = tagId ? blogEntries.filter((entry) => !entry.data.blogExclude && entry.data.tags?.map((tag) => tag.id).includes(tagId)) : blogEntries
  .filter((entry) => !entry.data.blogExclude);
const limit = postLimit ? postLimit : posts?.length;
---

  <div class="flex flex-col">
    {
      blogSort(posts).map((post, i) => {
        if (i < limit) {
          return (
            <div class="mt-5">
              <PostSummary post={post}  />
            </div>
            <div class="flex justify-around w-full text-2xl mt-5  py-2">
      </div>
          );
        }
      })
    }
  </div>

<style>
  h2 {
    font-family: "Prospekt Regular", sans-serif;
  }
</style>