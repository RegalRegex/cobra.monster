---
import BookSummary from "@components/Books/BookSummary.astro";
import FilterButtons, { BOOK_DISPLAY_VIEWS } from "@components/Books/FilterButtons.astro";
import TagContents from "@components/TagContents.astro";
import BookListLayout from "@layouts/BookListLayout.astro";
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

export const getStaticPaths = (async () => {
  const tagEntries = await getCollection("bookTags");
  const test = Object.values(BOOK_DISPLAY_VIEWS).flatMap((view) =>
    tagEntries.map((entry) => ({
      params: { tag: entry.id, view: view },
      props: { entry, view },
    })),
  );

  return test;
}) satisfies GetStaticPaths;
const tags = await getCollection("bookTags");
const bookReports: Array<CollectionEntry<"books">> = await getCollection("books");
const { entry, view } = Astro.props;
---

<BookListLayout>
  <TagContents
    slot="tag-list"
    pageUrl=`/books/${view}/tagged/`
    selected={entry.id}
    tagIds={tags.sort((a, b) => a.id.localeCompare(b.id)).map((tag) => tag.id)}
  />
  <div slot="book-list">
    <FilterButtons activeTab={view} tagId={entry.id} />
    <ul class="grid gap-5 grid-cols-1">
      {
        bookReports
          .filter((book) => book.data.bookTags.map((bookTag) => bookTag.id).includes(entry.id))
          .map((book, i) => <BookSummary book={book} view={view} />)
      }
    </ul>
  </div>
</BookListLayout>
